library ieee ;
use ieee.std_logic_1164.all;
use IEEE.NUMERIC_STD.all;

-----------------------------------------------------

entity PS2 is
port(
	ps2_data    :   in std_logic; 
	ps2_clock : in  std_logic; 
	
	reset : in std_logic;						
	key : out std_logic_vector(10 downto 0); 
	disp1: out std_logic_vector(6 downto 0);
	disp2: out std_logic_vector(6 downto 0);
	
	addr: out std_logic_vector(6 downto 0)
);
end PS2;

-----------------------------------------------------

architecture main of PS2 is

	signal i : integer := 0;
	signal code : std_logic_vector(10 downto 0);
	signal sw : integer := 0;
	
	function num2addr(num: std_logic_vector(7 downto 0))
		return std_logic_vector is
		variable ascii : std_logic_vector(7 downto 0);
		begin
			case num is
				when X"1C"  => ascii := X"41";--A
				when X"32"  => ascii := X"42";--B
				when X"21"  => ascii := X"43";--C
				when X"23"  => ascii := X"44";--D
				when X"24"  => ascii := X"45";--E
				when X"2B"  => ascii := X"46";--F
				when X"34"  => ascii := X"47";--G
				when X"33"  => ascii := X"48";--H
				when X"43"  => ascii := X"49";--I
				when X"3B"  => ascii := X"4A";--J
				when X"42"  => ascii := X"4B";--K
				when X"4B"  => ascii := X"4C";--L
				when X"3A"  => ascii := X"4D";--M
				when X"31"  => ascii := X"4E";--N
				when X"44"  => ascii := X"4F";--O
				when X"4D"  => ascii := X"50";--P
				when X"15"  => ascii := X"51";--Q
				when X"2D"  => ascii := X"52";--R
				when X"1B"  => ascii := X"53";--S
				when X"2C"  => ascii := X"54";--T
				when X"3C"  => ascii := X"55";--U
				when X"2A"  => ascii := X"56";--V
				when X"1D"  => ascii := X"57";--W
				when X"22"  => ascii := X"58";--Y
				when X"35"  => ascii := X"59";--X
				when X"1A"  => ascii := X"5A";--Z
				when X"45"  => ascii := X"30";--0
				when X"16"  => ascii := X"31";--1
				when X"1E"  => ascii := X"32";--2
				when X"26"  => ascii := X"33";--3
				when X"25"  => ascii := X"34";--4
				when X"2E"  => ascii := X"35";--5
				when X"36"  => ascii := X"36";--6
				when X"3D"  => ascii := X"37";--7
				when X"3E"  => ascii := X"38";--8
				when X"46"  => ascii := X"39";--9	
				when X"29"  => ascii := X"00";--Espacio
				when others => ascii := X"01";-- null
			end case;
		return ascii(6 downto 0);
	end num2addr;
	
	-- Funcion que permite tranformar un numero Hexadecimal a un array
	 function num2disp(cs : std_logic_vector(3 downto 0)) 
	 	return std_logic_vector is
		VARIABLE disp : std_logic_vector(6 downto 0);
		begin
			case cs is
				when X"0" => disp := "1101000";	
				when X"1" => disp := "1111001";	
				when X"2" => disp := "0101101";	
				when X"3" => disp := "0110000";					
				when X"4" => disp := "1011001";					
				when X"5" => disp := "0010010";					
				when X"6" => disp := "1101010";				
				when X"7" => disp := "1111000";				
				when X"8" => disp := "0111110";				
				when X"9" => disp := "0111000";					
				when X"A" => disp := "0000000";					
				when X"B" => disp := "1000001";
				when X"C" => disp := "1001110";
				when X"D" => disp := "0001101";
				when X"E" => disp := "0100110";
				when X"F" => disp := "0101110";
			end case;
			return std_logic_vector(disp);
		end num2disp;

begin
	
    state_reg: process(ps2_clock, reset)
    begin
		if (reset = '1') then
			i<=0;
			disp1<=num2disp(X"0");
			disp2<=num2disp(X"0");
			sw<=0;
			key<=(others=>'0');
		elsif (ps2_clock' event and ps2_clock = '0') then
			
			code(i) <= ps2_data;			
			
			
			if(i=10) then
				if (code(8 downto 1) = X"F0" ) then
					sw <= 1;
				elsif(sw=1 and code(8 downto 1) /= X"F0")then
					addr<=num2addr(code(8 downto 1));
					disp1<=num2disp(code(4 downto 1));
					disp2<=num2disp(code(8 downto 5));
					sw<=2;
				else
					sw<=0;
				end if;

			end if;
			i<=(i+1) mod 11;	
			
		end if;
	end process;
	
end main;